/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    LinkedList<TreeNode> stack = new LinkedList<TreeNode>();

    public BSTIterator(TreeNode root) {
       while(root != null)  {
           stack.push(root);
           root = root.left;
       }
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !stack.isEmpty();
    }

    /** @return the next smallest number */
    public int next() throws Exception {
       if(!hasNext())    {
           throw new Exception();
       }
       // stack top is the smallest one
       TreeNode cur = stack.pop();
       int res = cur.val;
       // after pop, store the most left child  of right subtree(which is the next smallest node)
       if(cur.right != null)    {
           cur = cur.right;
           stack.push(cur);
           while(cur.left != null)  {
               cur = cur.left;
               stack.push(cur);
           }
       }
       return res;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
